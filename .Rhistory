## If there are within-subject variables, calculate adjusted values using method from Morey (2008).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   withinvars: a vector containing names of columns that are within-subjects variables
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySEwithin <- function(data=NULL, measurevar, betweenvars=NULL, withinvars=NULL,
idvar=NULL, na.rm=FALSE, conf.interval=.95, .drop=TRUE) {
# Ensure that the betweenvars and withinvars are factors
factorvars <- vapply(data[, c(betweenvars, withinvars), drop=FALSE],
FUN=is.factor, FUN.VALUE=logical(1))
if (!all(factorvars)) {
nonfactorvars <- names(factorvars)[!factorvars]
message("Automatically converting the following non-factors to factors: ",
paste(nonfactorvars, collapse = ", "))
data[nonfactorvars] <- lapply(data[nonfactorvars], factor)
}
# Get the means from the un-normed data
datac <- summarySE(data, measurevar, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Drop all the unused columns (these will be calculated with normed data)
datac$sd <- NULL
datac$se <- NULL
datac$ci <- NULL
# Norm each subject's data
ndata <- normDataWithin(data, idvar, measurevar, betweenvars, na.rm, .drop=.drop)
# This is the name of the new column
measurevar_n <- paste(measurevar, "_norm", sep="")
# Collapse the normed data - now we can treat between and within vars the same
ndatac <- summarySE(ndata, measurevar_n, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Apply correction from Morey (2008) to the standard error and confidence interval
#  Get the product of the number of conditions of within-S variables
nWithinGroups    <- prod(vapply(ndatac[,withinvars, drop=FALSE], FUN=nlevels,
FUN.VALUE=numeric(1)))
correctionFactor <- sqrt( nWithinGroups / (nWithinGroups-1) )
# Apply the correction factor
ndatac$sd <- ndatac$sd * correctionFactor
ndatac$se <- ndatac$se * correctionFactor
ndatac$ci <- ndatac$ci * correctionFactor
# Combine the un-normed means with the normed results
merge(datac, ndatac)
}
summarySE(avgByCondAndCat)
summarySEwithin(avgByCondAndCat)
avgByCondAndCat
summarySEwithin(exp.tidy, measurevar="RT", groupvars="conditionName", na.rm=FALSE, conf.interval=.95)
exp.tidy$condition
exp.tidy$RT
summarySEwithin(exp.tidy, measurevar="RT", groupvars="condition", na.rm=FALSE, conf.interval=.95)
summarySEwithin(exp.tidy, measurevar="RT", groupvars="condition", na.rm=FALSE, conf.interval=.95)
e
exp.tidy$
summarySEwithin(data=exp.tidy, measurevar="RT", groupvars="condition", idvar="sub")
summarySEwithin(data=exp.tidy, measurevar="RT", groupvars="condition", idvar="sub")
exp.tidy
summarySEwithin(data=exp.tidy, measurevar="RT", withinvars="condition", idvar="sub")
summarySEwithin(data=exp.tidy, measurevar="RT", withinvars="conditionName", idvar="sub")
## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   groupvars: a vector containing names of columns that contain grouping variables
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
summarySEwithin(data=exp.tidy, measurevar="RT", withinvars="conditionName", idvar="sub")
## Norms the data within specified groups in a data frame; it normalizes each
## subject (identified by idvar) so that they have the same mean, within each group
## specified by betweenvars.
##   data: a data frame.
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   na.rm: a boolean that indicates whether to ignore NA's
normDataWithin <- function(data=NULL, idvar, measurevar, betweenvars=NULL,
na.rm=FALSE, .drop=TRUE) {
library(plyr)
# Measure var on left, idvar + between vars on right of formula.
data.subjMean <- ddply(data, c(idvar, betweenvars), .drop=.drop,
.fun = function(xx, col, na.rm) {
c(subjMean = mean(xx[,col], na.rm=na.rm))
},
measurevar,
na.rm
)
# Put the subject means with original data
data <- merge(data, data.subjMean)
# Get the normalized data in a new column
measureNormedVar <- paste(measurevar, "_norm", sep="")
data[,measureNormedVar] <- data[,measurevar] - data[,"subjMean"] +
mean(data[,measurevar], na.rm=na.rm)
# Remove this subject mean column
data$subjMean <- NULL
return(data)
}
## Summarizes data, handling within-subjects variables by removing inter-subject variability.
## It will still work if there are no within-S variables.
## Gives count, un-normed mean, normed mean (with same between-group mean),
##   standard deviation, standard error of the mean, and confidence interval.
## If there are within-subject variables, calculate adjusted values using method from Morey (2008).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   withinvars: a vector containing names of columns that are within-subjects variables
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySEwithin <- function(data=NULL, measurevar, betweenvars=NULL, withinvars=NULL,
idvar=NULL, na.rm=FALSE, conf.interval=.95, .drop=TRUE) {
# Ensure that the betweenvars and withinvars are factors
factorvars <- vapply(data[, c(betweenvars, withinvars), drop=FALSE],
FUN=is.factor, FUN.VALUE=logical(1))
if (!all(factorvars)) {
nonfactorvars <- names(factorvars)[!factorvars]
message("Automatically converting the following non-factors to factors: ",
paste(nonfactorvars, collapse = ", "))
data[nonfactorvars] <- lapply(data[nonfactorvars], factor)
}
# Get the means from the un-normed data
datac <- summarySE(data, measurevar, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Drop all the unused columns (these will be calculated with normed data)
datac$sd <- NULL
datac$se <- NULL
datac$ci <- NULL
# Norm each subject's data
ndata <- normDataWithin(data, idvar, measurevar, betweenvars, na.rm, .drop=.drop)
# This is the name of the new column
measurevar_n <- paste(measurevar, "_norm", sep="")
# Collapse the normed data - now we can treat between and within vars the same
ndatac <- summarySE(ndata, measurevar_n, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Apply correction from Morey (2008) to the standard error and confidence interval
#  Get the product of the number of conditions of within-S variables
nWithinGroups    <- prod(vapply(ndatac[,withinvars, drop=FALSE], FUN=nlevels,
FUN.VALUE=numeric(1)))
correctionFactor <- sqrt( nWithinGroups / (nWithinGroups-1) )
# Apply the correction factor
ndatac$sd <- ndatac$sd * correctionFactor
ndatac$se <- ndatac$se * correctionFactor
ndatac$ci <- ndatac$ci * correctionFactor
# Combine the un-normed means with the normed results
merge(datac, ndatac)
}
summarySEwithin(data=exp.tidy, measurevar="RT", withinvars="conditionName", idvar="sub")
summarySEwithin(data=exp.tidy, measurevar="RT", withinvars=c("conditionName,category"), idvar="sub")
summarySEwithin(data=exp.tidy, measurevar="RT", withinvars=c("conditionName","category"), idvar="sub")
plotLimits=c(1000,2500)
dodge <- position_dodge(width = 0.9)
ggplot(exp.tidy, aes(x=conditionName,y=RT, color=conditionName)) +
geom_bar(colour="black",stat="mean", position=dodge) +  # plot the point
# geom_errorbar(aes(ymin=LVEFbyRE-LVEFbyRE_SEM, ymax=LVEFbyRE+LVEFbyRE_SEM), width=.1) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5), axis.ticks.x=element_blank(), axis.ticks.y=element_blank()) + # rotate the x-axis labels, 75 refers to the degrees, 90 would be straight
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="LVEF(%)") + # kill redudant x label
ggtitle("Mean LVEF(%) by Race/Ethnicity")
plotSummary=summarySEwithin(data=exp.tidy, measurevar="RT", withinvars=c("conditionName","category"), idvar="sub")
plotSummary
plotSummary$
plotLimits=c(1000,2500)
dodge <- position_dodge(width = 0.9)
ggplot(plotSummary, aes(x=conditionName,y=RT, fill=conditionName)) +
geom_bar(colour="black",stat="identity", position=dodge) +  # plot the point
geom_errorbar(aes(ymin=RT-se, ymax=RT+se), width=.1) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5), axis.ticks.x=element_blank(),    axis.ticks.y=element_blank()) + # rotate the x-axis labels, 75 refers to the degrees, 90 would be straight
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="LVEF(%)") + # kill redudant x label
ggtitle("Mean LVEF(%) by Race/Ethnicity")
library(ggthemes)
library(ggplot2)
library(ggthemes)
library(ggplot2)
plotLimits=c(1000,2500)
dodge <- position_dodge(width = 0.9)
ggplot(plotSummary, aes(x=conditionName,y=RT, fill=conditionName)) +
geom_bar(colour="black",stat="identity", position=dodge) +  # plot the point
geom_errorbar(aes(ymin=RT-se, ymax=RT+se), width=.1) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5), axis.ticks.x=element_blank(),    axis.ticks.y=element_blank()) + # rotate the x-axis labels, 75 refers to the degrees, 90 would be straight
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="LVEF(%)") + # kill redudant x label
ggtitle("Mean LVEF(%) by Race/Ethnicity")
ggplot(plotSummary, aes(x=conditionName,y=RT, fill=conditionName)) +
geom_bar(colour="black",stat="identity", position=dodge) +  # plot the point
geom_errorbar(aes(ymin=RT-se, ymax=RT+se), width=.1) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5), axis.ticks.x=element_blank(),    axis.ticks.y=element_blank()) + # rotate the x-axis labels, 75 refers to the degrees, 90 would be straight
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="LVEF(%)") + # kill redudant x label
ggtitle("Mean LVEF(%) by Race/Ethnicity")
ggplot(plotSummary, aes(x=conditionName,y=RT, fill=conditionName)) +
geom_bar(stat="identity") +  # plot the point
geom_errorbar(aes(ymin=RT-se, ymax=RT+se), width=.1) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5), axis.ticks.x=element_blank(),    axis.ticks.y=element_blank()) + # rotate the x-axis labels, 75 refers to the degrees, 90 would be straight
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="Search speed (ms)") + # kill redudant x label
ggtitle("Mean RT by Condition & Category")
ggplot(plotSummary, aes(x=conditionName,y=RT, fill=conditionName)) +
geom_bar(stat="identity", position=dodge) +  # plot the point
geom_errorbar(aes(ymin=RT-se, ymax=RT+se), width=.1) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5), axis.ticks.x=element_blank(),    axis.ticks.y=element_blank()) + # rotate the x-axis labels, 75 refers to the degrees, 90 would be straight
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="Search speed (ms)") + # kill redudant x label
ggtitle("Mean RT by Condition & Category")
dodge <- position_dodge(width = 0.9)
ggplot(plotSummary, aes(x=c(conditionName, category),y=RT, fill=conditionName)) +
geom_bar(stat="identity", position=dodge) +  # plot the point
geom_errorbar(aes(ymin=RT-se, ymax=RT+se), width=.1) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5), axis.ticks.x=element_blank(),    axis.ticks.y=element_blank()) + # rotate the x-axis labels, 75 refers to the degrees, 90 would be straight
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="Search speed (ms)") + # kill redudant x label
ggtitle("Mean RT by Condition & Category")
ggplot(plotSummary, aes(x=c(conditionName, category),y=RT, fill=conditionName)) +
geom_bar(stat="identity", position=dodge) +  # plot the point
geom_errorbar(aes(ymin=RT-se, ymax=RT+se), width=.1) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5), axis.ticks.x=element_blank(),    axis.ticks.y=element_blank()) + # rotate the x-axis labels, 75 refers to the degrees, 90 would be straight
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="Search speed (ms)") + # kill redudant x label
ggtitle("Mean RT by Condition & Category")
plotSummary
plotSummary$conditionName
plotLimits=c(1000,2500)
dodge <- position_dodge(width = 0.9)
ggplot(plotSummary, aes(x=conditionName,y=RT, fill=category)) +
geom_bar(stat="identity", position=dodge) +  # plot the point
geom_errorbar(aes(ymin=RT-se, ymax=RT+se), width=.1) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5), axis.ticks.x=element_blank(),    axis.ticks.y=element_blank()) + # rotate the x-axis labels, 75 refers to the degrees, 90 would be straight
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="Search speed (ms)") + # kill redudant x label
ggtitle("Mean RT by Condition & Category")
ggplot(plotSummary, aes(x=conditionName,y=RT, fill=category)) +
geom_bar(stat="identity", position=dodge) +  # plot the point
geom_errorbar(aes(ymin=RT-se, ymax=RT+se), width=.1) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.ticks.x=element_blank(),    axis.ticks.y=element_blank()) +
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="Search speed (ms)") + # kill redudant x label
ggtitle("Mean RT by Condition & Category")
dodge <- position_dodge(width = 0.9)
ggplot(plotSummary, aes(x=conditionName,y=RT, fill=category)) +
geom_bar(stat="identity", position=dodge) +  # plot the point
geom_errorbar(aes(ymin=RT-se, ymax=RT+se), width=.1, position=dodge) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.ticks.x=element_blank(),    axis.ticks.y=element_blank()) +
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="Search speed (ms)") + # kill redudant x label
ggtitle("Mean RT by Condition & Category")
ggplot(plotSummary, aes(x=category,y=RT, fill=conditionName)) +
geom_bar(stat="identity", position=dodge) +  # plot the point
geom_errorbar(aes(ymin=RT-se, ymax=RT+se), width=.1, position=dodge) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.ticks.x=element_blank(),    axis.ticks.y=element_blank()) +
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="Search speed (ms)") + # kill redudant x label
ggtitle("Mean RT by Condition & Category")
levels(plotSummary$conditionName) <- c("uniform","uniform","mixed","mixed"")
levels(plotSummary$conditionName) <- c("uniform","uniform","mixed","mixed")
plotSummary$conditionName
plotSummary=summarySEwithin(data=exp.tidy, measurevar="RT", withinvars=c("conditionName","category"), idvar="sub")
plotSummary
source(summarySE)
knitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)
library(tidyverse) # for data munging
library(knitr) # for kable table formating
library(haven) # import and export 'SPSS', 'Stata' and 'SAS' Files
library(readxl) # import excel files
library(forcats) #manipulating factors in data frames
library(ez) # for anova
library(lme4)
library(markdown)
source("SEfunctions.R") ## helper code for within subs error bars
## Step 2: Load data
e1 = read_tsv("data/Animacy.txt")
e2 = read_tsv("data/ObjectSize.txt")
e3 = read_tsv("data/Edibility.txt")
## Choose experiment!
exp = e1
expName = 'Animacy'
#exp = e2
#expName = 'Size'
#
#exp = e3
#expName = 'Edibility'
##
exp$sub = as.factor(exp$sub)
exp$conditionNum = as.numeric(exp$condition)
exp$categoryNum = as.numeric(exp$categoryNum)
## Step 3: Preprocess data
# count how many trials per subject
trialCount=exp %>%
group_by(sub) %>%
summarise(trials=sum(phase=='SixItems'), correctTrials=sum(correct==1 & phase=='SixItems'), errors=sum(correct==0 & phase=='SixItems'), slow=sum(RT>4000 & phase=='SixItems' & correct==1))
# what percentage of all trials were incorrect?
round(mean(trialCount$errors/trialCount$trials)*100,2)
# what percentage of correct trials were slow?
round(mean(trialCount$slow/trialCount$correctTrials)*100,2)
# Only get data with correct trials less than 4 seconds long when there were six items on the screen.
exp.tidy=exp %>%
filter(RT<4000) %>%
filter(correct==1) %>%
filter(phase=='SixItems') %>%
filter(repeatDist==0) # for technical error trials in experiment 3 only.
# Now only include subjects who had more than 1 trial speeded trial in each of 4 conditions
exp.tidy=exp.tidy %>%
group_by(sub) %>%
mutate(indivCountC1=sum(conditionNum==1 & categoryNum==1)) %>%
mutate(indivCountC2=sum(conditionNum==1 & categoryNum==2)) %>%
mutate(indivCountC3=sum(conditionNum==2 & categoryNum==1)) %>%
mutate(indivCountC4=sum(conditionNum==2 & categoryNum==2)) %>%
filter(indivCountC1>1) %>%
filter(indivCountC2>1) %>%
filter(indivCountC3>1) %>%
filter(indivCountC4>1)
# Store included subs
includedSubs=unique(exp.tidy$sub)
# How many trials are included in each condition in this subset of children?
trialCountIncludedSubs=exp.tidy %>%
group_by(sub) %>%
filter(is.element(sub,includedSubs)) %>%
summarise(trialCount=length(RT), uniformCount=sum(conditionNum==1), mixedCount=sum(conditionNum==2))
# overall how many trials (and sd)
round(mean(trialCountIncludedSubs$trialCount),2)
round(sd(trialCountIncludedSubs$trialCount),2)
# how many trials on average per condition?
round(mean(trialCountIncludedSubs$uniformCount),2)
round(mean(trialCountIncludedSubs$mixedCount),2)
# Compute accuracy means
exp.accuracy=exp %>%
group_by(sub,conditionName, category) %>%
filter(phase=='SixItems') %>%
filter(repeatDist==0) %>% # for technical error trials in experiment 3 only.
filter(is.element(sub,includedSubs)) %>% # only use subs included in RT anlayses for consistency
summarise(meanAcc = mean(correct)) # average wtihin subjects
# summarize accuracy results
condAccMeans=exp.accuracy %>%
group_by(conditionName) %>%
summarize(avgCondAcc=mean(meanAcc), sdCondRT=sd(meanAcc))
source(summarySE)
ggplot(plotSummary, aes(x=category,y=RT, fill=conditionName)) +
geom_bar(stat="identity", position=dodge) +  # plot the point
geom_errorbar(aes(ymin=RT-se, ymax=RT+se), width=.1, position=dodge) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.ticks.x=element_blank(),    axis.ticks.y=element_blank()) +
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="Search speed (ms)") + # kill redudant x label +
scale_fill_grey() +
ggtitle("Mean RT by Condition & Category")
plotSummaryMin=summarySEwithin(data=exp.tidy, measurevar="RT", withinvars=c("conditionName"), idvar="sub")
ggplot(plotSummaryMin, aes(x=conditionName,y=RT, fill=conditionName)) +
geom_bar(stat="identity", position=dodge) +  # plot the point
geom_errorbar(aes(ymin=RT-se, ymax=RT+se), width=.1, position=dodge) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.ticks.x=element_blank(),    axis.ticks.y=element_blank()) +
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="Search speed (ms)") + # kill redudant x label +
scale_fill_grey() +
ggtitle("Mean RT by Condition")
ggplot(plotSummaryMin, aes(x=conditionName,y=RT, fill=conditionName)) +
geom_bar(stat="identity", position=dodge, width=.75) +  # plot the point
geom_errorbar(aes(ymin=RT-se, ymax=RT+se), width=.1, position=dodge) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.ticks.x=element_blank(),    axis.ticks.y=element_blank()) +
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="Search speed (ms)") + # kill redudant x label +
scale_fill_grey() +
ggtitle("Mean RT by Condition")
ggplot(plotSummaryMin, aes(x=conditionName,y=RT, fill=conditionName)) +
geom_bar(stat="identity", width=.75) +  # plot the point
geom_errorbar(aes(ymin=RT-se, ymax=RT+se), width=.1) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.ticks.x=element_blank(),    axis.ticks.y=element_blank()) +
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="Search speed (ms)") + # kill redudant x label +
scale_fill_grey() +
ggtitle("Mean RT by Condition")
ggplot(plotSummaryMin, aes(x=conditionName,y=RT, fill=conditionName)) +
geom_bar(stat="identity", position = position_dodge(width = 0.9)) +  # plot the point
geom_errorbar(aes(ymin=RT-se, ymax=RT+se), width=.1) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.ticks.x=element_blank(),    axis.ticks.y=element_blank()) +
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="Search speed (ms)") + # kill redudant x label +
scale_fill_grey() +
ggtitle("Mean RT by Condition")
plotSummaryMin=summarySEwithin(data=exp.tidy, measurevar="RT", withinvars=c("conditionName"), idvar="sub")
ggplot(plotSummaryMin, aes(x=conditionName,y=RT, fill=conditionName)) +
geom_bar(stat="identity", position = position_dodge(width = 0.9)) +  # plot the point
geom_errorbar(aes(ymin=RT-se, ymax=RT+se), width=.1) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.ticks.x=element_blank(),    axis.ticks.y=element_blank()) +
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="Search speed (ms)") + # kill redudant x label +
scale_fill_grey() +
theme(aspect.ratio=1.5)
ggtitle("Mean RT by Condition")
ggplot(plotSummaryMin, aes(x=conditionName,y=RT, fill=conditionName)) +
geom_bar(stat="identity", position = position_dodge(width = 0.9)) +  # plot the point
geom_errorbar(aes(ymin=RT-se, ymax=RT+se), width=.1) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.ticks.x=element_blank(),    axis.ticks.y=element_blank()) +
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="Search speed (ms)") + # kill redudant x label +
scale_fill_grey() +
theme(aspect.ratio=1.5) +
ggtitle("Mean RT by Condition")
plotSummaryMin=summarySEwithin(data=exp.tidy, measurevar="RT", withinvars=c("conditionName"), idvar="sub")
ggplot(plotSummaryMin, aes(x=conditionName,y=RT, fill=conditionName)) +
geom_bar(stat="identity", position = position_dodge(width = 0.9)) +  # plot the point
geom_errorbar(aes(ymin=RT-se, ymax=RT+se), width=.1) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.ticks.x=element_blank(),    axis.ticks.y=element_blank()) +
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="Search speed (ms)") + # kill redudant x label +
scale_fill_grey() +
theme(aspect.ratio=1.5)
tiff('test.tiff', units="in", width=5, height=5, res=300)
tiff('test.tiff', units="in", width=5, height=5, res=300)
ggplot(plotSummaryMin, aes(x=conditionName,y=RT, fill=conditionName)) +
geom_bar(stat="identity", position = position_dodge(width = 0.9)) +  # plot the point
geom_errorbar(aes(ymin=RT-se, ymax=RT+se), width=.1) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.ticks.x=element_blank(),    axis.ticks.y=element_blank()) +
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="Search speed (ms)") + # kill redudant x label +
scale_fill_grey() +
theme(aspect.ratio=1.5)
dev.off()
tiff('Plots/test.tiff', units="in", width=5, height=5, res=300)
ggplot(plotSummaryMin, aes(x=conditionName,y=RT, fill=conditionName)) +
geom_bar(stat="identity", position = position_dodge(width = 0.9)) +  # plot the point
geom_errorbar(aes(ymin=RT-se, ymax=RT+se), width=.1) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.ticks.x=element_blank(),    axis.ticks.y=element_blank()) +
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="Search speed (ms)") + # kill redudant x label +
scale_fill_grey() +
theme(aspect.ratio=1.5)
dev.off()
file.path(paste(dir, paste0("test.jpeg")
)
)
tiff('RTbyCond.tiff', units="in", width=5, height=5, res=300)
ggplot(plotSummaryMin, aes(x=conditionName,y=RT, fill=conditionName)) +
geom_bar(stat="identity", position = position_dodge(width = 0.9)) +  # plot the point
geom_errorbar(aes(ymin=RT-se, ymax=RT+se), width=.1) + # make some error bars
coord_cartesian(ylim=plotLimits) + # ugh, need this for some reason with bar plots - sorry
theme_hc(base_size=14)  + ## change ggplot theme, number here modulates size of text
theme(axis.ticks.x=element_blank(),    axis.ticks.y=element_blank()) +
theme(text=element_text(family="Helvetica Light")) + # I just think this is agood font
labs(x="", y="Search speed (ms)") + # kill redudant x label +
scale_fill_grey() +
theme(aspect.ratio=1.5)
dev.off()
